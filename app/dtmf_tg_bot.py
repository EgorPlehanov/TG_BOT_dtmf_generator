import telebot
from telebot.util import quick_markup
from decouple import config
import re

from dtmf import DTMF


API_TOKEN = config('BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)
dtmf = DTMF()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
# "processing" - —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ DTMF —Å–∏–≥–Ω–∞–ª–∞ (–≤–∫–ª—é—á–∞—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é, –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
# "settings" - —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# f"settings_{parameter_name}" - —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–º–µ—Ç—Ä–∞
bot_mode = "processing"  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º



@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    bot.reply_to(message, (
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n'
        '–Ø - –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è DTMF —Å–∏–≥–Ω–∞–ª–∞. ü§ñ\n\n'
        'üìû –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DTMF —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: 0-9, *, # –∏ A-D.\n\n'
        'üéôÔ∏è –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è DTMF —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n'
        'üìö –û—Ç–ø—Ä–∞–≤—å—Ç–µ /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ DTMF –∏ –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.\n\n'
        '‚öôÔ∏è –ó–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ /settings.'
    ))



@bot.message_handler(commands=['info'])
def send_info(message):
    with open("src\\text\dtmf_info.txt", "r", encoding="utf-8") as file:
        dtmf_info = file.read()
        bot.send_message(
            message.chat.id,
            dtmf_info,
            parse_mode='HTML'
        )
    with open('src\img\dtmf_frequencies.png', 'rb') as dtmf_frequencies:
        bot.send_photo(
            message.chat.id,
            caption='–ß–∞—Å—Ç–æ—Ç—ã DTMF',
            photo=dtmf_frequencies, 
        )



@bot.message_handler(commands=['settings'])
def send_settings(message):
    global bot_mode; bot_mode = "settings"
    bot.send_message(
        message.chat.id,
        '‚ÄºÔ∏è –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ DTMF ‚öôÔ∏è'
    )

    dtmf_parameters = dtmf.get_parameters()
    markup_inline = telebot.util.quick_markup({
        **{
            parameter_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'): {'callback_data': parameter_name}
            for parameter_name, parameter_data in dtmf_parameters.items()
        },
        '–í—ã–π—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫': {'callback_data': 'cancel'}
    })
    bot.send_message(
        message.chat.id,
        (
            'üîß –ù–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: \n\n' +
            '\n'.join([
                f"{parameter_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}: {parameter_data.get('value')} {parameter_data.get('unit', '')}"
                for parameter_name, parameter_data in dtmf_parameters.items()
            ]) +
            '\n\n‚¨áÔ∏è–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è‚¨áÔ∏è'
        ),
        reply_markup=markup_inline
    )



@bot.callback_query_handler(func=lambda call: "settings" in bot_mode)
def callback_query_settings(call):
    global bot_mode

    if call.data == 'cancel':
        bot_mode = "processing"
        bot.send_message(
            call.message.chat.id,
            '‚ÄºÔ∏è –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è DTMF —Å–∏–≥–Ω–∞–ª–∞ üéõÔ∏è',
        )
        return
    if call.data == 'cancel_set_parameter':
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot_mode = "settings"
        return

    dtmf_parameters = dtmf.get_parameters()
    bot.send_message(
        call.message.chat.id,
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n{dtmf_parameters.get(call.data).get('name')}",
        reply_markup=telebot.util.quick_markup({
            '–û—Ç–º–µ–Ω–∞': {'callback_data': 'cancel_set_parameter'}
        })
    )
    bot_mode = f"settings|{call.data}"



@bot.message_handler(
    content_types=['text'],
    func=lambda _: 'settings|' in bot_mode
)
def handle_parameter_text(message):
    global bot_mode
    parameter_name = bot_mode.split('|')[1]
    
    dtmf_parameters = dtmf.get_parameters()
    parameter_data = dtmf_parameters.get(parameter_name)
    parameter_converter = parameter_data.get('converter')
    parameter_validator = parameter_data.get('validator')
    parameter_print_name = parameter_data.get('name') or parameter_name

    try:
        parameter_value = parameter_converter(message.text)
        if not parameter_validator(parameter_value):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        dtmf.set_parameter(parameter_name, parameter_value)
        bot.send_message(
            message.chat.id,
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä {parameter_print_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {parameter_value}"
        )
    except ValueError as e:
        bot.send_message(
            message.chat.id,
            f"–û—à–∏–±–∫–∞: {e}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {parameter_print_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
    except Exception:
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {parameter_print_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
    
    send_settings(message)
    


@bot.message_handler(
    content_types=['text'],
    func=lambda _: bot_mode=='processing'
)
def handle_number_text(message):
    phone_number = message.text.strip().upper()

    if not re.match(r"^[0-9#*A-D]+$", phone_number):
        bot.reply_to(message, '–ù–∞–ø–∏—à–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,\n—Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤ # –∏ *.')
        return

    signal_file, format = dtmf.get_dtmf_signal_file(phone_number, format="mp3")

    bot.send_audio(
        chat_id=message.chat.id,
        audio=signal_file,
        title=f"DTMF: {phone_number}",
        performer="DTMF Bot",
        reply_to_message_id=message.message_id
    )



@bot.message_handler(
    content_types=['audio', 'voice', 'document'],
    func=lambda _: bot_mode=='processing'
)
def voice_processing(message):
    answer_message = bot.reply_to(message, f"–ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å...")

    file_info, file_format = None, None
    match message.content_type:
        case 'audio':
            file_info = bot.get_file(message.audio.file_id)
            file_format = 'mp3'
        case 'voice':
            file_info = bot.get_file(message.voice.file_id)
            file_format = 'ogg'
        case 'document':
            file_info = bot.get_file(message.document.file_id)
            file_format = 'wav'
        case _:
            bot.delete_message(answer_message.chat.id, answer_message.message_id)
            bot.reply_to(message, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–∏ÃÜ —Ç–∏–ø —Ñ–∞–∏ÃÜ–ª–∞.")
            return
        
    print(f"–§–∞–π–ª: {file_info.file_path}")
    downloaded_file = bot.download_file(file_info.file_path)
    try:
        phone_number, images = dtmf.recognize_dtmf(downloaded_file, file_format)
    except Exception:
        bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.", answer_message.chat.id, answer_message.message_id)
        return

    if phone_number:
        bot.edit_message_text(
            f"–ù–∞–±—Ä–∞–Ω –Ω–æ–º–µ—Ä: {phone_number}",
            answer_message.chat.id,
            answer_message.message_id,
            disable_web_page_preview = True
        )
    else:
        bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä.", answer_message.chat.id, answer_message.message_id)
        
    bot.send_media_group(
        answer_message.chat.id,
        [telebot.types.InputMediaPhoto(img) for img in images]
    )



@bot.message_handler(func=lambda message: True)
def echo_message(message):
    global bot_mode
    if 'settings' in bot_mode:
        bot.reply_to(message, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —á—Ç–æ–±—ã –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å')
    else:
        bot.reply_to(message, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.')



bot.infinity_polling()


# venv_dtmf\Scripts\activate
# python app\dtmf_tg_bot.py