import telebot
from typing import Any
from decouple import config
import re

from dtmf import DTMF

API_TOKEN = config('BOT_TOKEN')
bot = telebot.TeleBot(API_TOKEN)
bot_chat_parameters = {}


def create_chat_parameters(chat_id) -> dict:
    '''
    –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —á–∞—Ç–∞

    mode - —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    mode values:
        "processing" - —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ DTMF —Å–∏–≥–Ω–∞–ª–∞ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
        "settings" - —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ DTMF
        f"settings|{parameter_name}" - —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∞–º–µ—Ç—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ DTMF
    '''
    global bot_chat_parameters
    bot_chat_parameters[chat_id] = {
        'mode': 'processing',
        'dtmf': DTMF()
    }
    
    return bot_chat_parameters[chat_id]


def get_chat_parameter(chat_id, parameter_name) -> Any:
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —á–∞—Ç–∞'''
    global bot_chat_parameters

    chat_paremeters = bot_chat_parameters.get(chat_id)
    if not chat_paremeters:
        chat_paremeters = create_chat_parameters(chat_id)
    
    return chat_paremeters.get(parameter_name)


def set_chat_parameter(chat_id, parameter_name, parameter_value) -> None:
    '''–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —á–∞—Ç–∞'''
    global bot_chat_parameters

    chat_paremeters = bot_chat_parameters.get(chat_id)
    if not chat_paremeters:
        chat_paremeters = create_chat_parameters(chat_id)
    
    chat_paremeters[parameter_name] = parameter_value



@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'''
    create_chat_parameters(message.chat.id)

    bot.reply_to(message, (
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n'
        '–Ø - –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è DTMF —Å–∏–≥–Ω–∞–ª–∞. ü§ñ\n\n'
        'üìû –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DTMF —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: 0-9, *, # –∏ A-D.\n\n'
        'üéôÔ∏è –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è DTMF —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n'
        'üìö –û—Ç–ø—Ä–∞–≤—å—Ç–µ /info, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ DTMF –∏ –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.\n\n'
        '‚öôÔ∏è –ó–∞–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ /settings.'
    ))


def get_file(file_path, mode='r', encoding='utf-8') -> str:
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–∏ÃÜ–ª–∞'''
    try:
        with open(file_path, mode, encoding=encoding) as file:
            return file.read()
    except Exception as e:
        print(e)
        return '–§–∞–∏ÃÜ–ª –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.'


@bot.message_handler(commands=['info'])
def send_info(message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DTMF'''
    dtmf_info = get_file("src\\text\info_dtmf.txt")
    bot.send_message(message.chat.id, dtmf_info, parse_mode='HTML')

    dtmf_frequencies_photo = get_file("src\img\dtmf_frequencies.png", 'rb', None)
    bot.send_photo(message.chat.id, photo=dtmf_frequencies_photo, caption='–ß–∞—Å—Ç–æ—Ç—ã DTMF —Å–∏–≥–Ω–∞–ª–∞')


@bot.message_handler(commands=['info_dtmf_generate_signal'])
def send_info_dtmf_generate_signal(message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ DTMF —Å–∏–≥–Ω–∞–ª–∞'''
    dtmf_info = get_file("src\\text\info_dtmf_generate_signal.txt")
    bot.send_message(message.chat.id, dtmf_info, parse_mode='HTML')


@bot.message_handler(commands=['info_dtmf_recognition_signal'])
def send_info_dtmf_recognition_signal(message):
    '''–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ DTMF —Å–∏–≥–Ω–∞–ª–∞'''
    dtmf_info = get_file("src\\text\info_dtmf_recognition_signal.txt")
    bot.send_message(message.chat.id, dtmf_info, parse_mode='HTML')



@bot.message_handler(commands=['settings'])
def send_settings(message):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ DTMF'''
    set_chat_parameter(message.chat.id, 'mode', "settings")

    bot.send_message(
        message.chat.id,
        '‚ÄºÔ∏è –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ DTMF ‚öôÔ∏è'
    )
    
    dtmf = get_chat_parameter(message.chat.id, 'dtmf')
    dtmf_parameters = dtmf.get_parameters()

    bot.send_message(
        message.chat.id,
        (
            'üîß –ù–∞—Å—Ç—Ä–æ–∏ÃÜ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: \n\n' +
            '\n'.join([
                f"{parameter_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}: {parameter_data.get('value')} {parameter_data.get('unit', '')}"
                for _, parameter_data in dtmf_parameters.items()
            ]) +
            '\n\n‚¨áÔ∏è–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è‚¨áÔ∏è'
        ),
        reply_markup=telebot.util.quick_markup({
            **{
                parameter_data.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'): {'callback_data': parameter_name}
                for parameter_name, parameter_data in dtmf_parameters.items()
            },
            '–í—ã–π—Ç–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫': {'callback_data': 'cancel'}
        })
    )



@bot.callback_query_handler(
    func=lambda call: "settings" in get_chat_parameter(call.message.chat.id, 'mode')
)
def callback_query_settings(call):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ DTMF'''
    if call.data == 'cancel':
        set_chat_parameter(call.message.chat.id, 'mode', "processing")
        bot.send_message(
            call.message.chat.id,
            '‚ÄºÔ∏è –ë–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è DTMF —Å–∏–≥–Ω–∞–ª–∞ üéõÔ∏è',
        )
        return
    if call.data == 'cancel_set_parameter':
        set_chat_parameter(call.message.chat.id, 'mode', "settings")
        bot.delete_message(call.message.chat.id, call.message.message_id)
        return

    dtmf = get_chat_parameter(call.message.chat.id, 'dtmf')
    dtmf_parameters = dtmf.get_parameters()
    parameter_name = dtmf_parameters.get(call.data).get('name')
    parameter_unit = dtmf_parameters.get(call.data).get('unit')

    bot.send_message(
        call.message.chat.id,
        (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:\n"
            f"{parameter_name} {('('+ parameter_unit +')' if parameter_unit else '')}"
        ),
        reply_markup=telebot.util.quick_markup({
            '–û—Ç–º–µ–Ω–∞': {'callback_data': 'cancel_set_parameter'}
        })
    )

    set_chat_parameter(call.message.chat.id, 'mode', f"settings|{call.data}")



@bot.message_handler(
    content_types=['text'],
    func=lambda message: 'settings|' in get_chat_parameter(message.chat.id, 'mode')
)
def handle_parameter_text(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ DTMF'''
    bot_mode = get_chat_parameter(message.chat.id, 'mode')
    parameter_name = bot_mode.split('|')[1]
    
    dtmf = get_chat_parameter(message.chat.id, 'dtmf')
    dtmf_parameters = dtmf.get_parameters()

    parameter_data = dtmf_parameters.get(parameter_name)
    parameter_converter = parameter_data.get('converter')
    parameter_validator = parameter_data.get('validator')
    parameter_print_name = parameter_data.get('name') or parameter_name

    try:
        parameter_value = parameter_converter(message.text)
        if not parameter_validator(parameter_value):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        dtmf.set_parameter(parameter_name, parameter_value)
        bot.send_message(
            message.chat.id,
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä {parameter_print_name} —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {parameter_value}"
        )
    except ValueError as e:
        bot.send_message(
            message.chat.id,
            f"–û—à–∏–±–∫–∞: {e}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {parameter_print_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
    except Exception:
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {parameter_print_name}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
    
    send_settings(message)
    


@bot.message_handler(
    content_types=['text'],
    func=lambda message: get_chat_parameter(message.chat.id, 'mode') == 'processing'
)
def handle_number_text(message):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DTMF —Å–∏–≥–Ω–∞–ª –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É'''
    phone_number = message.text.strip().upper()

    if not re.match(r"^[0-9#*A-D]+$", phone_number):
        bot.reply_to(message, '–ù–∞–ø–∏—à–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞,\n—Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤ # –∏ *.')
        return

    dtmf = get_chat_parameter(message.chat.id, 'dtmf')
    signal_file, format = dtmf.get_dtmf_signal_file(phone_number, format="mp3")

    bot.send_audio(
        chat_id=message.chat.id,
        audio=signal_file,
        title=f"DTMF: {phone_number}",
        performer="DTMF Bot",
        reply_to_message_id=message.message_id,
        reply_markup=telebot.util.quick_markup({
            '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–∏–≥–Ω–∞–ª': {'callback_data': 'voice_processing'}
        })
    )


@bot.callback_query_handler(
    func=lambda call: "processing" in get_chat_parameter(call.message.chat.id, 'mode')
)
def handle_recognize_signal_callback(call):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–∏–≥–Ω–∞–ª"'''
    voice_processing(call.message)


@bot.message_handler(
    content_types=['audio', 'voice', 'document'],
    func=lambda message: get_chat_parameter(message.chat.id, 'mode') == 'processing'
)
def voice_processing(message):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–º—É —Å–∏–≥–Ω–∞–ª—É'''
    answer_message = bot.reply_to(message, f"–ù—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å...")

    content_type_to_processing = {
        'audio': {
            'get_file_info': lambda message: bot.get_file(message.audio.file_id),
            'file_format': 'mp3'
        },
        'voice': {
            'get_file_info': lambda message: bot.get_file(message.voice.file_id),
            'file_format': 'ogg'
        },
        'document': {
            'get_file_info': lambda message: bot.get_file(message.document.file_id),
            'file_format': 'wav'
        }
    }

    bot_processing = content_type_to_processing[message.content_type]
    if not bot_processing:
        bot.delete_message(answer_message.chat.id, answer_message.message_id)
        bot.reply_to(message, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–∏ÃÜ —Ç–∏–ø —Ñ–∞–∏ÃÜ–ª–∞.")
        return
    
    file_info = bot_processing['get_file_info'](message)
    file_format = bot_processing['file_format']
            
    print(f"–§–∞–π–ª: {file_info.file_path}") # DEBUG

    downloaded_file = bot.download_file(file_info.file_path)
    try:
        dtmf = get_chat_parameter(message.chat.id, 'dtmf')
        phone_number, images = dtmf.recognize_dtmf(downloaded_file, file_format)
    except Exception as e:
        bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.", answer_message.chat.id, answer_message.message_id)
        print(e)
        return

    if phone_number:
        bot.edit_message_text(
            f"–ù–∞–±—Ä–∞–Ω –Ω–æ–º–µ—Ä: {phone_number}",
            answer_message.chat.id,
            answer_message.message_id,
            disable_web_page_preview = True
        )
    else:
        bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä.", answer_message.chat.id, answer_message.message_id)
    
    if images is not None:
        bot.send_media_group(
            answer_message.chat.id,
            [telebot.types.InputMediaPhoto(img) for img in images]
        )



@bot.message_handler(func=lambda message: True)
def echo_message(message):
    '''–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'''
    if 'settings' in get_chat_parameter(message.chat.id, 'mode'):
        bot.reply_to(message, '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —á—Ç–æ–±—ã –µ–≥–æ –≤—ã–±—Ä–∞—Ç—å')
    else:
        bot.reply_to(message, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ù–∞–ø–∏—à–∏ /help.')



bot.infinity_polling()


# venv_dtmf\Scripts\activate
# python app\dtmf_tg_bot.py